package com.nalitnyk.Lab4.controllers;

import com.nalitnyk.Lab4.aop.AddLogging;
import com.nalitnyk.Lab4.models.Exchange;
import com.nalitnyk.Lab4.repositories.ExchangeRepository;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Component("exchange")
@Controller // This means that this class is a Controller
@RequestMapping(path = "/exchange") // This means URL's start with /demo (after Application path)
public class ExchangeController {
    private static final long MINUTES_NEED_TO_UPDATE = 15;
    static List<Exchange> rates = new ArrayList<>();
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ExchangeRepository exchangeRepository;

    @GetMapping(path = "/usd")
    public @ResponseBody String getUSD() {
        updateDB();
        Optional<Exchange> exchange = rates.stream().filter(r -> r.getId().equals("USD")).findFirst();
        return exchange.map(value -> "Поточний курс: " + value.getRateToUah().toString()).orElse("USD to UAN exchange rate is not available now");
    }
    @GetMapping(path = "/euro")
    public @ResponseBody String getEURO() {
        updateDB();
        Optional<Exchange> exchange = rates.stream().filter(r -> r.getId().equals("EUR")).findFirst();
        return exchange.map(value -> "Поточний курс: " + value.getRateToUah().toString()).orElse("USD to UAN exchange rate is not available now");
    }

    public void updateDB() {
        long minutes;

        Iterable<Exchange> iterator = exchangeRepository.findAll();

        iterator.forEach(rates::add);

        if (rates.isEmpty()) {
            minutes = 99;
        } else {
            Instant hehe = (rates.get(0).getUpdatedAt() == null) ? Instant.ofEpochSecond(0) : rates.get(0).getUpdatedAt();
            minutes = ChronoUnit.MINUTES.between(hehe, Instant.now());

        }


        if (minutes >= MINUTES_NEED_TO_UPDATE) {
            System.out.print("\n---Minutes > " + MINUTES_NEED_TO_UPDATE + "--\nCurrent minutes: " + minutes + "\n");
            try {
                String privatbankAPI = "https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5";
                String json = getHTML(privatbankAPI);
                updateTables(json/*, rates*/);


            } catch (Exception e) {
                System.out.println("Не вдалося зробити Get запит");
                throw new RuntimeException(e);
            }
        }
    }

    @AddLogging
    public void updateTables(String rawJson/*, List<Exchange> rates*/) {
        rates.clear();
        exchangeRepository.deleteAll();
        exchangeRepository.deleteAll();
//        System.out.println("rawJson: " + rawJson);
        JSONArray array = new JSONArray(rawJson);
        for (int i = 0; i < array.length(); i++) {
            JSONObject elem = array.getJSONObject(i);
//            System.out.println(elem.getString("ccy") + "|||" + elem.getString("base_ccy") + "|||" + elem.getDouble("buy"));
            if (elem.getString("base_ccy").equals("UAH")) {
                Exchange rate = new Exchange();
                rate.setRateToUah(elem.getDouble("buy"));
                rate.setId(elem.getString("ccy"));
                rate.setUpdatedAt(Instant.now());
//                rates.add(rate);
                exchangeRepository.save(rate);
//                System.out.println("Added!\n");
            }
        }

    }

    public String getHTML(String urlToRead) throws Exception {
        StringBuilder result = new StringBuilder();
        URL url = new URL(urlToRead);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        // Установлюємо тип запиту
        conn.setRequestMethod("GET");
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
            // порядково зчитуємо
            for (String line; (line = reader.readLine()) != null; ) {
                result.append(line);
            }
        }
        return result.toString();
    }
}
