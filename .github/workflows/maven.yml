# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: My Java CI with Maven

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the lw6 branch commits
  push:
    branches: [ "lw6" ]
    # Triggers the workflow on push events but only for the lw6 branch pull requests
  pull_request:
    branches: [ "lw6" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
# 2
# Setting up env vars (docker image name)
env:
  REGISTRY: "nalitnyk"
  IMAGE_NAME: "my-spring-github-actions"
# 3
jobs:
#
#  build_and_push:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      #
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: Build with Maven
#        run: mvn clean package
#
#      - name: Checkout the repo
#        uses: actions/checkout@v2
#
##      - name: Build container image
##        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .
#
#
#
#      - name: Install doctl
#        uses: digitalocean/action-doctl@v2
#        with:
#          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
#
#      - name: Log in to DigitalOcean Container Registry with short-lived credentials
#        run: doctl registry login --expiry-seconds 600
#
#      - name: Remove all old images
#        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi
#
#      - name: Build & push Docker image
#        uses: mr-smithers-excellent/docker-build-push@v5
#        with:
#          image: nalitnyk/my-spring-github-actions
#          tags: latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          passphrase: ${{ secrets.SERVER_PASSPHRASE }}
#
##      - name: Push image to DigitalOcean Container Registry
##        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
#
#      - name: Update dependency graph
#        uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.SERVER_PASSPHRASE }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
